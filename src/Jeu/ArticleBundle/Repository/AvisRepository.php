<?php

namespace Jeu\ArticleBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AvisRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AvisRepository extends \Doctrine\ORM\EntityRepository
{
	public function findAvis($list,$page, $nbPerPage)
	{
	$qb = $this->createQueryBuilder('a');
	$qb
	  ->innerJoin('a.article', 'c')
	  ->addSelect('c')
	;
	$qb->where($qb->expr()->in('c.id', ':art'))
		->setParameter('art',$list)
		->getQuery();
	$qb
		
		  ->setFirstResult(($page-1) * $nbPerPage)
		  // Ainsi que le nombre d'annonce à afficher sur une page
		  ->setMaxResults($nbPerPage)
		;

		// Enfin, on retourne l'objet Paginator correspondant à la requête construite
		// (n'oubliez pas le use correspondant en début de fichier)
		return new Paginator($qb, true);
	}	
  
	public function getAvis($page, $nbPerPage)
	{
		$query = $this->createQueryBuilder('a')
		  ->getQuery()
		;

		$query
		  // On définit l'annonce à partir de laquelle commencer la liste
		  ->setFirstResult(($page-1) * $nbPerPage)
		  // Ainsi que le nombre d'annonce à afficher sur une page
		  ->setMaxResults($nbPerPage)
		;

		// Enfin, on retourne l'objet Paginator correspondant à la requête construite
		// (n'oubliez pas le use correspondant en début de fichier)
		return new Paginator($query, true);
	}  
  
	public function getNote()
	{
		$qb = $this->createQueryBuilder('a');
		$qb
			->select('avg(a.note) as moyenne')
			//->setParameter(($qb->expr()->avg('a.note')),':moyenne')
			//->where($qb->expr()->avg('a.note') = ':note')
			->leftJoin('a.article','u')
			->groupBy('u.titre')
			->addSelect('u.titre')
			->orderBy('moyenne','DESC')
			->setMaxResults(5)
			;
		return $qb->getQuery()->getResult();	
	}
  
	public function getNotes()
	{
		$qb = $this->createQueryBuilder('a');
		$qb
			->select('avg(a.note) as moyenne')
			//->setParameter(($qb->expr()->avg('a.note')),':moyenne')
			//->where($qb->expr()->avg('a.note') = ':note')
			->leftJoin('a.article','u')
			->groupBy('u.titre')
			->addSelect('u.titre')
			// ->orderBy('moyenne','DESC')
			// ->setMaxResults(5)
			;
		return $qb->getQuery()->getResult();	
	}  
  
}
